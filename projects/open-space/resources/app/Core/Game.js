// Generated by CoffeeScript 1.12.1
(function() {
  var Draw, Init, Load, Update, openSpace;

  Torch.StrictErrors();

  Torch.DumpErrors();

  openSpace = new Torch.Game("container", "fill", "fill", "OpenSpace", Torch.CANVAS);

  Load = function(game) {
    Player.Load(game);
    Projectile.Load(game);
    Enemy.Load(game);
    HUD.Load(game);
    Powerup.Load(game);
    MotherShip.Load(game);
    MainMenu.Load(game);
    game.Load.Texture("Assets/Art/torch-logo.png", "torch-logo");
    game.Load.Texture("Assets/Art/offon-logo.png", "offon-logo");
    game.Load.Texture("Assets/Art/PNG/UI/cursor.png", "cursor");
    game.Load.Texture("Assets/Art/background.png", "background");
    game.Load.Font("Assets/Art/Bonus/kenvector_future.ttf", "main-font");
    game.Load.TextureAtlas("Assets/Art/Effects/simple-explosion-atlas.json", "simple-explosion");
    return game.Load.Texture("Assets/Art/Effects/simple-explosion.png", "simple-explosion");
  };

  Init = function(game) {
    game.Clear("black");
    game.score = 0;
    game.Mouse.SetCursor("cursor");
    game.State.AddState("startGame", {
      Start: function(game) {
        game.hud = new HUD(game);
        game.background = new Background(game);
        game.motherShip = new MotherShip(game);
        game.player = new Player(game);
        game.enemyGenerator = new EnemyGenerator(game);
        game.debugConsole = new Torch.DebugConsole(game);
        game.effectGenerator = new EffectGenerator(game);
        return game.score = 0;
      },
      Execute: function(game) {},
      End: function(game) {}
    });
    game.State.AddState("splash", {
      Start: function(game) {
        var offAndOnLogo, torchLogo;
        torchLogo = game.Factory.Sprite(0, 0, "torch-logo");
        torchLogo.Center().CenterVertical();
        offAndOnLogo = game.Factory.Sprite(0, 0, "offon-logo");
        offAndOnLogo.Center().CenterVertical();
        torchLogo.opacity = 0;
        offAndOnLogo.opacity = 0;
        return game.Tweens.Tween(torchLogo, 1000).To({
          opacity: 1
        }).On("Finish", function() {
          return game.Timer.SetFutureEvent(5000, function() {
            return game.Tweens.Tween(offAndOnLogo, 500).To({
              opacity: 1
            }).On("Finish", function() {
              return game.Timer.SetFutureEvent(5000, function() {
                torchLogo.Trash();
                offAndOnLogo.Trash();
                return game.State.Switch("mainMenu");
              });
            });
          });
        });
      },
      Execute: function(game) {},
      End: function(game) {}
    });
    game.State.AddState("mainMenu", {
      Start: function(game) {
        return game.mainMenu = new MainMenu(game);
      },
      Execute: function(game) {},
      End: function(game) {
        return game.mainMenu.Trash();
      }
    });
    game.State.AddState("credits", {
      Start: function(game) {
        var background;
        background = new Background(game);
        game.Factory.Text(0, 100, {
          font: "main-font",
          text: "Programming & Design:",
          color: "purple",
          fontSize: 48
        }).Center();
        game.Factory.Text(0, 200, {
          font: "main-font",
          text: "Alex Smith (offandongames.io)",
          color: "white",
          fontSize: 24
        }).Center();
        game.Factory.Text(0, 300, {
          font: "main-font",
          text: "Art:",
          color: "purple",
          fontSize: 48
        }).Center();
        return game.Factory.Text(0, 400, {
          font: "main-font",
          text: "Keeney (keeney.nl)",
          color: "white",
          fontSize: 24
        }).Center();
      },
      Execute: function(game) {},
      End: function(game) {}
    });
    game.State.AddState("lose", {
      Start: function(game) {
        var i, len, loseText, quitButton, ref, restartButton, thing;
        game.Emit("Lose", {});
        ref = game.things;
        for (i = 0, len = ref.length; i < len; i++) {
          thing = ref[i];
          thing.Trash();
        }
        loseText = new Torch.Text(game, 0, 300, {
          text: "GAME OVER",
          font: "main-font",
          color: "red",
          fontSize: 48
        });
        loseText.Center();
        restartButton = game.Factory.Button(0, 0, {
          color: "white",
          text: "Restart",
          font: "main-font",
          fontSize: 18
        }, {
          mainBackground: "button-background-red",
          mouseDownBackground: "button-background-mouse-down-red"
        });
        quitButton = game.Factory.Button(0, 600, {
          color: "white",
          text: "Quit",
          font: "main-font",
          fontSize: 18
        }, {
          mainBackground: "button-background-red",
          mouseDownBackground: "button-background-mouse-down-red"
        });
        restartButton.Center().CenterVertical();
        quitButton.Center();
        restartButton.On("Click", function() {
          quitButton.Trash();
          loseText.Trash();
          restartButton.Trash();
          return game.State.Switch("startGame");
        });
        return quitButton.On("Click", function() {
          return require('electron').remote.app.quit();
        });
      },
      Execute: function(game) {},
      End: function(game) {}
    });
    return game.State.Switch("splash");
  };

  Draw = function(game) {};

  Update = function(game) {
    if (game.hud != null) {
      return game.hud.scoreText.text = game.score;
    }
  };

  openSpace.Start({
    Load: Load,
    Update: Update,
    Draw: Draw,
    Init: Init
  });

  window.openSpace = openSpace;

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\dev\js\Torch.js\Games\OpenSpace\Src\Game.coffee