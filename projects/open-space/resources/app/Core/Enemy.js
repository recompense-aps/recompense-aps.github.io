// Generated by CoffeeScript 1.12.1
(function() {
  var AttackState, EnterState, exports,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  exports = this;

  exports.Enemy = (function(superClass) {
    extend(Enemy, superClass);

    Enemy.prototype.ENEMY = true;

    Enemy.prototype.textureName = "enemy-default";

    Enemy.prototype.powerupGenerator = null;

    Enemy.prototype.positionTarget = null;

    Enemy.prototype.velocity = 0.2;

    Enemy.prototype.startVelocity = 0.5;

    Enemy.prototype.attackDistance = 500;

    Enemy.prototype.hp = 1;

    Enemy.prototype.points = 10;

    Enemy.prototype.damage = 10;

    function Enemy(game, x, y) {
      var dir;
      Enemy.__super__.constructor.call(this, game, x, y);
      this.Bind.Texture(this.textureName);
      this.Size.Scale(1, 1);
      dir = this.GetMothershipVector();
      dir.MultiplyScalar(this.startVelocity);
      this.rotation = -dir.angle;
      this.Body.velocity.Set(dir.x, dir.y);
      this.powerupGenerator = new PowerupGenerator(this);
      this.mode = this.States.CreateStateMachine("Mode");
      this.mode.AddState("enter", new EnterState());
      this.mode.AddState("attack", new AttackState());
      this.mode.Switch("enter");
      this.On("Damaged", (function(_this) {
        return function(event) {
          return _this.hp -= event.damage;
        };
      })(this));
    }

    Enemy.Load = function(game) {
      game.Load.Texture("Assets/Art/PNG/Enemies/enemyBlack4.png", "enemy-default");
      return game.Load.Texture("Assets/Art/PNG/Enemies/enemyBlack1.png", "enemy-shooter");
    };

    Enemy.prototype.Kill = function() {
      this.game.effectGenerator.CreateSimpleExplosion(this.position.x, this.position.y);
      this.emitter = this.game.Particles.ParticleEmitter(500, 0, 0, true, this.textureName, {
        spread: 20,
        gravity: 0.0001,
        minAngle: 0,
        maxAngle: Math.PI * 2,
        minScale: 0.01,
        maxScale: 0.05,
        minVelocity: 0.01,
        maxVelocity: 0.01,
        minAlphaDecay: 400,
        maxAlphaDecay: 450,
        minOmega: 0.001,
        maxOmega: 0.001
      });
      this.emitter.auto = false;
      this.emitter.position = this.position.Clone();
      this.Trash();
      if (Math.random() < 0.2) {
        return this.powerupGenerator.Generate();
      }
    };

    Enemy.prototype.Update = function() {
      Enemy.__super__.Update.call(this);
      if (this.hp <= 0) {
        this.Kill();
        return this.game.score += 10;
      }
    };

    Enemy.prototype.StageAttack = function() {
      return this.Effects.Trail();
    };

    Enemy.prototype.GetMothershipVector = function() {
      var dir;
      dir = this.position.Clone();
      dir.SubtractVector(this.game.motherShip.position);
      dir.MultiplyScalar(-1);
      dir.Normalize();
      return dir;
    };

    Enemy.prototype.GetDistanceToMotherShipCenter = function() {
      var dis, ms;
      dis = this.position.Clone();
      ms = this.game.motherShip.position.Clone();
      ms.x += this.game.motherShip.rectangle.width / 2;
      ms.y += this.game.motherShip.rectangle.height / 2;
      dis.SubtractVector(ms);
      return dis.magnitude;
    };

    return Enemy;

  })(Torch.Sprite);

  exports.DiverEnemy = (function(superClass) {
    extend(DiverEnemy, superClass);

    DiverEnemy.prototype.startVelocity = 0.2;

    DiverEnemy.prototype.attackVelocity = 0.4;

    DiverEnemy.prototype.attackDistance = 300;

    function DiverEnemy(game, x, y) {
      DiverEnemy.__super__.constructor.call(this, game, x, y);
      this.Collisions.Monitor();
      this.On("Collision", (function(_this) {
        return function(event) {
          var obj;
          obj = event.collisionData.collider;
          if (obj.MOTHERSHIP) {
            obj.Emit("Damaged", {
              damage: _this.damage
            });
            return _this.Kill();
          }
        };
      })(this));
    }

    DiverEnemy.prototype.StageAttack = function() {
      DiverEnemy.__super__.StageAttack.call(this);
      this.Body.velocity.Normalize();
      return this.Body.velocity.MultiplyScalar(this.attackVelocity);
    };

    return DiverEnemy;

  })(exports.Enemy);

  exports.ShooterEnemy = (function(superClass) {
    extend(ShooterEnemy, superClass);

    ShooterEnemy.prototype.points = 20;

    ShooterEnemy.prototype.hp = 2;

    ShooterEnemy.prototype.textureName = "enemy-shooter";

    function ShooterEnemy(game, x, y) {
      ShooterEnemy.__super__.constructor.call(this, game, x, y);
    }

    ShooterEnemy.prototype.Update = function() {
      var angle, p;
      ShooterEnemy.__super__.Update.call(this);
      p = this.position.Clone();
      p.SubtractVector(this.game.motherShip.position);
      angle = p.angle - Math.PI;
      return this.rotation = -angle;
    };

    ShooterEnemy.prototype.StageAttack = function() {
      var scheduledEvent;
      this.orbit = true;
      this.Effects.Trail();
      this.Body.velocity.Set(0, 0);
      this.Body.Orbit(this.game.motherShip, 0.001, 400);
      scheduledEvent = this.game.Timer.SetScheduledEvent(300, (function(_this) {
        return function() {
          var cordX, cordY, p, p1, rot, x, y;
          p = _this.position.Clone();
          p.SubtractVector(_this.game.motherShip.position);
          p.Normalize();
          p.MultiplyScalar(-1.5);
          rot = _this.rotation - Math.PI / 2;
          cordX = Math.cos(rot);
          cordY = Math.sin(rot);
          x = _this.position.x + ((_this.rectangle.width / 2) * cordX) + _this.rectangle.width / 2;
          y = _this.position.y + ((_this.rectangle.height / 2) * cordY) + _this.rectangle.height / 2;
          x -= cordX * _this.rectangle.width;
          y -= cordY * _this.rectangle.height;
          p1 = new ShooterEnemyProjectile(_this, {
            direction: p,
            x: x,
            y: y
          });
          p1.position.x -= p1.rectangle.width / 2;
          p1.position.y -= p1.rectangle.height / 2;
          return p1.drawIndex = -1;
        };
      })(this));
      return this.On("Trash", function() {
        return scheduledEvent.Trash();
      });
    };

    return ShooterEnemy;

  })(exports.Enemy);

  EnterState = (function() {
    function EnterState() {}

    EnterState.prototype.Execute = function(enemy) {
      if (enemy.GetDistanceToMotherShipCenter() <= enemy.attackDistance) {
        return this.stateMachine.Switch("attack");
      }
    };

    EnterState.prototype.Start = function(enemy) {};

    EnterState.prototype.End = function(enemy) {};

    return EnterState;

  })();

  AttackState = (function() {
    function AttackState() {}

    AttackState.prototype.Execute = function(enemy) {};

    AttackState.prototype.Start = function(enemy) {
      return enemy.StageAttack();
    };

    AttackState.prototype.End = function(enemy) {};

    return AttackState;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\dev\js\Torch.js\Games\OpenSpace\Src\Enemy.coffee